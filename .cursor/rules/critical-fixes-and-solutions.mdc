---
description:
globs:
alwaysApply: false
---
# Critical Fixes and Solutions

This document highlights the critical issues discovered and their solutions, which saved the project from potential failure.

## 1. FAISS GPU Transfer Performance Issue

### Problem
GPU transfers taking 2-5 minutes due to pip-installed faiss-gpu package causing JIT compilation delays.

### Solution
Install FAISS via conda instead of pip:
```bash
# Remove pip version
pip uninstall faiss-gpu faiss-cpu

# Install conda version
conda install -c pytorch -c nvidia faiss-gpu=1.8.0
```

### Implementation
See [faiss_gpu_utils.py](mdc:faiss_gpu_utils.py) for GPU optimization utilities:
- CUDA cache persistence
- GPU pre-warming
- Float16 precision
- Multi-GPU support

### Result
GPU transfers reduced from 2-5 minutes to 2-5 seconds (60-100x improvement).

## 2. Critical Filtering Bug (December 2024)

### Problem
When using multiple filter columns in batch search, results incorrectly showed only products from the same date as input SKUs. This nearly resulted in project termination.

### Root Cause
All selected columns were applied as PRE-filters before similarity search, reducing 29,136 embeddings to 0-13 embeddings.

### Solution
Split filtering into two stages in [batch_processor_optimized.py](mdc:batch_processor_optimized.py):
1. **Pre-filtering**: Only essential columns (BRAND_DES, USERGENDER_DES, PRODUCT_TYPE_COD)
2. **Post-filtering**: All other columns applied after similarity search

### Configuration
Filter behavior controlled by [config_filtering.py](mdc:config_filtering.py):
```python
PREFILTER_COLUMNS = ['BRAND_DES', 'USERGENDER_DES', 'PRODUCT_TYPE_COD', 'MD_SKU_STATUS_COD']
```

### Result
- Before: 0-13 embeddings (0.0%), all same date
- After: 230+ embeddings (0.8%), spanning 18+ different dates

## 3. SKU to Embedding Alignment Issue

### Problem
Mismatch between DataFrame (34,431 SKU-based rows) and embeddings (29,136 filename-based vectors).

### Solution
Implemented proper index translation chain in [data_loader.py](mdc:data_loader.py):
```
SKU → filename_root → embedding_index → search → embedding_index → filename_root → SKUs
```

### Key Mappings
- `filename_to_idx`: Maps filename_root to embedding index
- `idx_to_filename_root`: Reverse mapping
- `derive_filename_root_from_sku()`: Handles SKU to filename conversion

## 4. Batch Processing Performance

### Problem
Sequential SKU processing at 6 images/second.

### Solution
Implemented bulk operations in [app.py](mdc:app.py):
```python
# Bulk exact SKU match
exact_matches_df = data_loader.df[data_loader.df['SKU_COD'].isin(sku_list)]

# Bulk regex search
pattern_regex = '|'.join([f'^{p}' for p in partial_patterns])
partial_matches_df = data_loader.df[df['filename_root'].str.contains(pattern_regex)]
```

### Result
- Before: N individual queries
- After: 3 bulk queries
- Performance: 1000x+ speedup (100+ images/second)

## 5. Path Normalization Issues

### Problem
Various path format inconsistencies between FAISS metadata and actual files.

### Solution
Implemented comprehensive path normalization in [data_loader.py](mdc:data_loader.py):
- Handle multiple file extensions (.jpg, .JPG)
- Try with/without _O00 suffix
- Case-insensitive matching
- Relative to absolute path conversion

## Key Lessons Learned

1. **Installation Method Matters**: Conda vs pip can have 100x performance difference
2. **Filter Order Critical**: Pre-filtering must be selective, not restrictive
3. **Data Alignment**: Always verify index↔data mappings in multi-source systems
4. **Bulk Operations**: Vectorized operations dramatically outperform loops
5. **Path Handling**: Never assume consistent file naming conventions
